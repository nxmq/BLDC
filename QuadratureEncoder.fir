;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit QuadratureEncoder : 
  module QuadratureEncoder : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<1>, flip b : UInt<1>, flip i : UInt<1>, cnt : UInt<16>, dir : UInt<1>}
    
    reg aPrev : UInt<1>, clock @[QuadratureEncoder.scala 27:24]
    reg aNew : UInt<1>[2], clock @[QuadratureEncoder.scala 28:28]
    reg bPrev : UInt<1>, clock @[QuadratureEncoder.scala 29:24]
    reg bNew : UInt<1>[2], clock @[QuadratureEncoder.scala 30:28]
    reg iPrev : UInt<1>, clock @[QuadratureEncoder.scala 31:24]
    reg iNew : UInt<1>[2], clock @[QuadratureEncoder.scala 32:28]
    reg edgeDebounceCounter : UInt<6>, clock @[QuadratureEncoder.scala 33:38]
    reg indexDebounceCounter : UInt<6>, clock @[QuadratureEncoder.scala 34:39]
    reg position : UInt<16>, clock @[QuadratureEncoder.scala 35:27]
    reg dir : UInt<1>, clock @[QuadratureEncoder.scala 36:22]
    io.dir <= dir @[QuadratureEncoder.scala 37:10]
    io.cnt <= position @[QuadratureEncoder.scala 38:10]
    wire _WIRE : UInt<1>[2] @[QuadratureEncoder.scala 40:18]
    _WIRE[0] <= aNew[0] @[QuadratureEncoder.scala 40:18]
    _WIRE[1] <= io.a @[QuadratureEncoder.scala 40:18]
    aNew[0] <= _WIRE[0] @[QuadratureEncoder.scala 40:8]
    aNew[1] <= _WIRE[1] @[QuadratureEncoder.scala 40:8]
    wire _WIRE_1 : UInt<1>[2] @[QuadratureEncoder.scala 41:18]
    _WIRE_1[0] <= bNew[0] @[QuadratureEncoder.scala 41:18]
    _WIRE_1[1] <= io.b @[QuadratureEncoder.scala 41:18]
    bNew[0] <= _WIRE_1[0] @[QuadratureEncoder.scala 41:8]
    bNew[1] <= _WIRE_1[1] @[QuadratureEncoder.scala 41:8]
    node _T = xor(aNew[0], aNew[1]) @[QuadratureEncoder.scala 42:17]
    node _T_1 = xor(bNew[0], bNew[1]) @[QuadratureEncoder.scala 42:39]
    node _T_2 = or(_T, _T_1) @[QuadratureEncoder.scala 42:28]
    when _T_2 : @[QuadratureEncoder.scala 42:51]
      edgeDebounceCounter <= UInt<1>("h00") @[QuadratureEncoder.scala 43:25]
      skip @[QuadratureEncoder.scala 42:51]
    else : @[QuadratureEncoder.scala 44:61]
      node _T_3 = eq(edgeDebounceCounter, UInt<6>("h032")) @[QuadratureEncoder.scala 44:35]
      when _T_3 : @[QuadratureEncoder.scala 44:61]
        aPrev <= aNew[1] @[QuadratureEncoder.scala 45:11]
        bPrev <= bNew[1] @[QuadratureEncoder.scala 46:11]
        skip @[QuadratureEncoder.scala 44:61]
      else : @[QuadratureEncoder.scala 47:15]
        node _T_4 = add(edgeDebounceCounter, UInt<1>("h01")) @[QuadratureEncoder.scala 48:48]
        node _T_5 = tail(_T_4, 1) @[QuadratureEncoder.scala 48:48]
        edgeDebounceCounter <= _T_5 @[QuadratureEncoder.scala 48:25]
        skip @[QuadratureEncoder.scala 47:15]
    wire _WIRE_2 : UInt<1>[2] @[QuadratureEncoder.scala 50:18]
    _WIRE_2[0] <= iNew[0] @[QuadratureEncoder.scala 50:18]
    _WIRE_2[1] <= io.i @[QuadratureEncoder.scala 50:18]
    iNew[0] <= _WIRE_2[0] @[QuadratureEncoder.scala 50:8]
    iNew[1] <= _WIRE_2[1] @[QuadratureEncoder.scala 50:8]
    node _T_6 = xor(iNew[0], iNew[1]) @[QuadratureEncoder.scala 51:16]
    when _T_6 : @[QuadratureEncoder.scala 51:27]
      indexDebounceCounter <= UInt<1>("h00") @[QuadratureEncoder.scala 52:26]
      skip @[QuadratureEncoder.scala 51:27]
    else : @[QuadratureEncoder.scala 53:62]
      node _T_7 = eq(indexDebounceCounter, UInt<6>("h032")) @[QuadratureEncoder.scala 53:35]
      when _T_7 : @[QuadratureEncoder.scala 53:62]
        iPrev <= iNew[1] @[QuadratureEncoder.scala 54:11]
        skip @[QuadratureEncoder.scala 53:62]
      else : @[QuadratureEncoder.scala 55:15]
        node _T_8 = add(indexDebounceCounter, UInt<1>("h01")) @[QuadratureEncoder.scala 56:50]
        node _T_9 = tail(_T_8, 1) @[QuadratureEncoder.scala 56:50]
        indexDebounceCounter <= _T_9 @[QuadratureEncoder.scala 56:26]
        skip @[QuadratureEncoder.scala 55:15]
    when iPrev : @[QuadratureEncoder.scala 59:15]
      position <= UInt<1>("h00") @[QuadratureEncoder.scala 60:14]
      skip @[QuadratureEncoder.scala 59:15]
    else : @[QuadratureEncoder.scala 61:107]
      node _T_10 = eq(edgeDebounceCounter, UInt<6>("h032")) @[QuadratureEncoder.scala 61:34]
      node _T_11 = xor(aNew[0], aNew[1]) @[QuadratureEncoder.scala 61:72]
      node _T_12 = xor(bNew[0], bNew[1]) @[QuadratureEncoder.scala 61:94]
      node _T_13 = or(_T_11, _T_12) @[QuadratureEncoder.scala 61:83]
      node _T_14 = and(_T_10, _T_13) @[QuadratureEncoder.scala 61:59]
      when _T_14 : @[QuadratureEncoder.scala 61:107]
        node _T_15 = xor(bPrev, aPrev) @[QuadratureEncoder.scala 62:18]
        dir <= _T_15 @[QuadratureEncoder.scala 62:9]
        node _T_16 = xor(bPrev, aPrev) @[QuadratureEncoder.scala 63:16]
        when _T_16 : @[QuadratureEncoder.scala 63:25]
          node _T_17 = lt(position, UInt<15>("h07fff")) @[QuadratureEncoder.scala 64:21]
          when _T_17 : @[QuadratureEncoder.scala 64:55]
            node _T_18 = add(position, UInt<1>("h01")) @[QuadratureEncoder.scala 65:32]
            node _T_19 = tail(_T_18, 1) @[QuadratureEncoder.scala 65:32]
            position <= _T_19 @[QuadratureEncoder.scala 65:20]
            skip @[QuadratureEncoder.scala 64:55]
          else : @[QuadratureEncoder.scala 66:19]
            position <= UInt<1>("h00") @[QuadratureEncoder.scala 67:18]
            skip @[QuadratureEncoder.scala 66:19]
          skip @[QuadratureEncoder.scala 63:25]
        else : @[QuadratureEncoder.scala 69:17]
          node _T_20 = gt(position, UInt<1>("h00")) @[QuadratureEncoder.scala 70:21]
          when _T_20 : @[QuadratureEncoder.scala 70:28]
            node _T_21 = sub(position, UInt<1>("h01")) @[QuadratureEncoder.scala 71:30]
            node _T_22 = tail(_T_21, 1) @[QuadratureEncoder.scala 71:30]
            position <= _T_22 @[QuadratureEncoder.scala 71:18]
            skip @[QuadratureEncoder.scala 70:28]
          else : @[QuadratureEncoder.scala 72:19]
            position <= UInt<15>("h07fff") @[QuadratureEncoder.scala 73:18]
            skip @[QuadratureEncoder.scala 72:19]
          skip @[QuadratureEncoder.scala 69:17]
        skip @[QuadratureEncoder.scala 61:107]
    
